#+TITLE: Phil config

* Goal : Tracking and deploying Config files

Keeping all my computers uniformly configured.

Version control my configuration files.

* Problems & Solutions

** You can't create a repo in $HOME

Solution : Put the files in a directory and replace the files with links to these files.

** Creating these links is tedious and error prone

Solution : The script install.sh allows for easy linking and unlinking of groups of files.

** Syncing

Solution : Pushing and fetching often


* Files

Each file in PWD except install.sh FILES MISC README.org and CMC os a file that
has a link in $HOME pointing to it.

All files referred to by the linked files should go in the FILES directory.

All files not linked to by the linked files should go in the MISC directory.

CMC represents a particular environment and finally install.sh and README.org
are just special.

* Deployment

Links are defined and grouped in a big case statement. For each group they
replace a bunch of files in $HOME with links to files in this repo.

Running =install.sh link full= creates all the links and =install.sh unlink
full= unlinks all the groups.

The word =full= can be replaced by one of the groups.

#+BEGIN_SRC sh
    case $1 in
        bash)
            link_or_unlink $HOME/.bashrc bashrc
            link_or_unlink $HOME/.bash_profile bash_profile
            ;;
        cmc)
            link_or_unlink $HOME/.profile CMC/profile
            link_or_unlink $HOME/.profile.d CMC/profile.d
            ;;
        fish)
            link_or_unlink $HOME/.config/fish config/fish
            ;;
        git)
            link_or_unlink $HOME/.gitconfig gitconfig
            link_or_unlink $HOME/.gitignore.global gitignore.global
            link_or_unlink $HOME/.config/git git
            ;;
        rsync)
            link_or_unlink $HOME/.cvsignore gitignore.global
            ;;
        spacemacs)
            link_or_unlink $HOME/.spacemacs spacemacs
            link_or_unlink $HOME/.spacemacs.d spacemacs.d
            if [ -d ~/.emacs.d ] ; then 
               link_or_unlink $HOME/.emacs.d/private emacs.d/private
            else
               echo "Group spacemacs : could not link $HOME/.emacs.d/private because $HOME/.emacs.d does not exist"
            fi
            ;;
        sublime)
            link_or_unlink $HOME/.config/sublime-text-3 config/sublime-text-3
            ;;
        templates)
            link_or_unlink $HOME/Templates Templates
            ;;
        tmux)
            link_or_unlink $HOME/.tmux.conf tmux.conf
            ;;
        vim)
            link_or_unlink $HOME/.vimrc vimrc
            link_or_unlink $HOME/.ideavimrc vimrc # Pycharm uses this
            link_or_unlink $HOME/.vim/colors vim/colors
            link_or_unlink $HOME/.vim/indent vim/indent
            link_or_unlink $HOME/.vim/plugin vim/plugin
            link_or_unlink $HOME/.vim/doc vim/doc
            link_or_unlink $HOME/.vim/autoload vim/autoload
            link_or_unlink $HOME/.ycm_extra_conf.py ycm_extra_conf.py
            ;;
        wakatime)
            link_or_unlink $HOME/.wakatime.cfg wakatime.cfg
            ;;
        zsh)
            link_or_unlink $HOME/.zprofile zprofile
            link_or_unlink $HOME/.zshrc zshrc
            link_or_unlink $HOME/.zshenv zshenv
            link_or_unlink $HOME/.zsh_custom zsh_custom
            ;;
        *)
            echo Invalid group $1
            show_usage
            ;;
    esac
#+END_SRC

** TODO Move this data to a Linkfile and parse with groups

#+BEGIN_SRC sh
        [bash]
            $HOME/.bashrc bashrc
            $HOME/.bash_profile bash_profile
        [cmc]
            $HOME/.profile CMC/profile
            $HOME/.profile.d CMC/profile.d
        [fish]
            $HOME/.config/fish config/fish
        [git]
            $HOME/.gitconfig gitconfig
            $HOME/.gitignore.global gitignore.global
            $HOME/.config/git git
#+END_SRC

#+BEGIN_SRC sh
  while read first second rest ; do
      if [[ first = "[*]" ]] ; then
          group = ${fist%%"]"}
          group = ${group##"["}
          current_group=group
      elif ! [ -z $first ] && ! [ -z $second ] ; then
          group="$group $first $second"
      elif ! [ -z $first ] ; then
          echo "I don't know what to do with this line:"
          echo "    $first $second $rest"
      fi
  done < some_file.txt
#+END_SRC
