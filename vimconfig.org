#+TITLE: Vimrc file
#+PROPERTY: header-args:vimrc :tangle ~/.vim/vimrc :results none

* Be iMproved

#+begin_src vimrc
set nocompatible              " be iMproved, required
filetype off                  " required
#+end_src

* TAB Behavior
#+begin_src vimrc
set tabstop=4       " Display width of \t character
set shiftwidth=4    " Indents will have a width of 4.
set softtabstop=4   " Sets the number of columns for a TAB.
set expandtab       " Expand TABs to spaces.
#+end_src
Use different rules for makefiles and go
http://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim/21323445#21323445
#+begin_src vimrc
filetype plugin indent on
autocmd FileType make set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
autocmd FileType go set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
#+end_src

* wrapping
#+begin_src vimrc
set autoindent
set wrap
set textwidth=80
set wrapmargin=0
set colorcolumn=80
#+end_src

* MISC
#+begin_src vimrc
set scrolloff=5
set nolist " Show or don't show invisible chars like tabs and newlines
set hlsearch
set number
set showcmd " Display incomplete commands at the right
set backspace=indent,eol,start " Usual backspace behavior
set foldnestmax=1
set encoding=utf-8
#+end_src

* Color and powerline

#+begin_src vimrc
syntax on
set t_Co=256 " Apparently this has to be set before setting the color scheme
set laststatus=2 " For vim-powerline
colorscheme molokai " Requires https://github.com/tomasr/molokai
#+end_src

* Remember position in file

This line can be found commented in the system vimrc file : =/etc/vim/vimrc=.
#+begin_src 
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal!  g'\"" | endif
#+end_src
I left out the =if has("autocmd")= because I have yet to encounter a version of
vim that does not have it.

* Keys
#+begin_src vimrc
inoremap jk <ESC>
#+end_src

** Arrows
I remap arrows to do nothing except for the up-down arrows in normal mode.

This allows me to use the mouse wheel to scroll through a file when in normal
mode.

I don't want to turn on mouse mode, but I do like being able to scroll like
this when I'm just reading through a file.

Up down move the cursor in one direction and scrolls the view in the other.
This has the effect that the cursor stays in the same place on the screen
which is a good behavior for scrolling.
#+begin_src vimrc
nnoremap <Up> <C-y>k
nnoremap <Down> <C-e>j
nnoremap <Left> <ESC>:echoerr "Your mind is weak."<CR>
nnoremap <Right> <ESC>:echoerr "Your mind is weak."<CR>

inoremap <Up> <ESC>:echoerr "Join me or die"<CR>
inoremap <Down> <ESC>:echoerr "The clouded mind sees nothing"<CR>
inoremap <Left> <ESC>:echoerr "Your mind is weak."<CR>
inoremap <Right> <ESC>:echoerr "The clouded mind sees nothing"<CR>
#+end_src


* Org todo keywords

#+begin_src vimrc
:let g:org_todo_keywords=['TODO', 'GTD-IN', 'GTD-ACTION', 'GTD-PROJECT', 'GTD-NEXT-ACTION', 'GTD-WAITING', 'GTD-SOMEDAY-MAYBE', 'FEEDBACK', 'VERIFY', '|', 'DONE', 'GTD-DONE', 'GTD-REFERENCE', 'GTD-DELEGATED']
#+end_src
* How this file works

*NOTE* The file cannot be named anything that contains =vimrc= otherwise vim
will open it as a vimrc instead of opening it as an orgmode file.

Tangle this file using =C-c C-v C-t= to produce =~/.vimrc= and clone the repos
in the plugins section.  With vim 8+, there is no need to do any more than to
clone vim plugins in =~/.vim/pack/*/start= for the plugin to be loaded on start.

#+begin_src shell :results output :exports both
mkdir -p ~/.vim/pack/vendor/start/
cd ~/.vim
git init
cd ./pack/vendor/start/
git submodule add https://github.com/jceb/vim-orgmode 2>&1
git submodule add https://github.com/scrooloose/nerdtree 2>&1
git submodule add https://github.com/powerline/powerline 2>&1
git submodule add https://github.com/ntpeters/vim-better-whitespace 2>&1
git submodule add https://github.com/tpope/vim-fugitive 2>&1
git submodule add https://github.com/tomasr/molokai 2>&1
git submodule add https://github.com/nelstrom/vim-markdown-folding 2>&1 || true
#+end_src

Use =C-c C-c= on this block (=org-babel-execute-src-block=) in Emacs


