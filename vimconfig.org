#+TITLE: Vimrc file
#+PROPERTY: header-args:vimrc :tangle vimrc :results none
#+OPTIONS: toc:2

* Shell command to tangle

To tangle from the shell, use this command:
#+begin_src sh
emacs --batch -l org FILE -f org-babel-tangle
#+end_src
Note where the =FILE= appears in the command.

It seems that it must appear before the =-f org-babel-tangle= argument.

The manual =man emacs= says this about =-f=, =-l=, =-e, --eval=:

#+begin_quote
The following options are Lisp-oriented (these options are processed in the
order encountered):
#+end_quote

* Header


#+begin_src vimrc
" This file was generated from vimconfig.org by using org-babel-tangle.
" That file is 'tangled' to make this vimrc file which should be pointed to
" by a link '~/.vimrc -> $this_file'
#+end_src

* Fundamental
** Be iMproved

#+begin_src vimrc
set nocompatible              " be iMproved, required
filetype plugin indent on
#+end_src

** Remember position in file

This line can be found commented in the system vimrc file : =/etc/vim/vimrc=.
#+begin_src vimrc
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal!  g'\"" | endif
#+end_src
I left out the =if has("autocmd")= because I have yet to encounter a version of
vim that does not have it.

** Indentation

We use listchars to show unwanted whitespace characters: tabs are shown as =»~=
when space is the preferred indentation and leading spaces are shown as =»= in
=go= and =make= where real =\t= characters are the preferred indentation method.

*** General

#+begin_src vimrc
set autoindent
set list
#+end_src

*** 4 spaces for everything

Allways use 4 spaces, if a file does contain real =\t= characters, display them
4 spaces wide

#+begin_src vimrc
set tabstop=4       " Display width of \t character
set shiftwidth=4    " Indents will have a width of 4.
set softtabstop=4   " Sets the number of columns for a TAB.
set expandtab       " Expand TABs to spaces.
#+end_src

Display unwanted whitespace characters by setting =listchars=.

#+begin_src vimrc
set listchars=tab:»~,extends:›,precedes:‹,nbsp:·,trail:·
#+end_src

*** Tabs for go and make

Display tabs 4 spaces wide and don't convert to spaces.

#+begin_src vimrc
autocmd FileType make,go setlocal tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
#+end_src

Change =listchars= to show indentation with spaces and display tabs normally.

Note that when tabs are used to indent, we only want to highlight /leading/
space which would be with =listchars=tab:\ \ ,lead:·=. However =:help listchars=
at my work shows that it is not available and that is because it is Vim 8.0.

Until I figure out how to write an =if version < 8.2= in vim, I'll make it
conditional.  For now, just showing spaces as a center dot.

#+begin_src vimrc
autocmd FileType make,go setlocal listchars=tab:\ \ ,space:·,trail:·,precedes:←,extends:→
#+end_src

*** Two spaces for yaml

#+begin_src vimrc
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
#+end_src

*** Use AnsiEsc for =*.out= files

#+begin_src vimrc
autocmd BufRead *.out :AnsiEsc
autocmd BufRead *.out setlocal nowrap
#+end_src

** Wrapping

*** Hard Wrapping
#+begin_src vimrc
set textwidth=0
#+end_src
See =:help textwidth= setting =textwidth= to a non-zero value activates
automatic hard wrapping while inserting.
#+begin_src vimrc
" This doesn't work but I tried it with autocmd filetype and it seemed to
" work
" au BufRead,BufNewFile *.md setlocal textwidth=80
" au BufRead,BufNewFile *.org setlocal textwidth=80
" au BufRead,BufNewFile *.txt setlocal textwidth=80
#+end_src

*** Visual wrapping

**** Configure visual wrapping

#+begin_src vimrc
set wrap
set wrapmargin=0
set colorcolumn=80
#+end_src

**** Set j,k to move up and down visual lines

This makes =j,k= move up and down display lines instead of moving by physical
lines (i.e. defined by ='\n'=).

#+begin_src vimrc
nnoremap j gj
nnoremap k gk
#+end_src

** MISC

#+begin_src vimrc
syntax on
set scrolloff=5
set hlsearch
set number
set showcmd " Display incomplete commands at the right
set backspace=indent,eol,start " Usual backspace behavior
set encoding=utf-8
#+end_src

* Additional
** Color

#+begin_src vimrc
set t_Co=256 " Apparently this has to be set before setting the color scheme
colorscheme molokai " Requires https://github.com/tomasr/molokai
#+end_src

** Plugins
*** Markdown nested folding

Plugin : https://github.com/masukomi/vim-markdown-folding

#+begin_src vimrc
autocmd FileType markdown setlocal foldexpr=NestedMarkdownFolds()
#+end_src

*** Org

Plugins :
- https://github.com/jceb/vim-orgmode
- https://github.com/tpope/vim-speeddating

Org todo keywords
#+begin_src vimrc
let g:org_todo_keywords=['TODO', 'GTD-IN', 'GTD-ACTION', 'GTD-PROJECT', 'GTD-NEXT-ACTION', 'GTD-WAITING', 'GTD-SOMEDAY-MAYBE', 'FEEDBACK', 'VERIFY', '|', 'DONE', 'GTD-DONE', 'GTD-REFERENCE', 'GTD-DELEGATED']
#+end_src

Path to elisp backend
#+begin_src vimrc
let g:org_export_emacs="~/.local/bin/emacs"
#+end_src

** Status line
*** Always show status line

2 means always

#+begin_src vimrc
set laststatus=2
#+end_src

*** New Powerline
**** Install instructions

These are the official instructions but this is not what I do.

https://powerline.readthedocs.io/en/latest/installation/osx.html#python-package

**** Using powerline

I use powerline with vim8's native plugin handling.

I put a link pointing to =$repo/powerline/bindings/vim= inside the
=~/.vim/pack/*/start=.

Make sure =laststatus=2= makes it always displayed.

**** Important note about macos

Adding powerline made vim hang and fail to start on my mac.  I figured out that
changing to a version of vim that has python3 support fixed my problem.

I did
#+begin_src shell
brew install --cask macvim
#+end_src
and made sure that this version of vim is the one being used.

*** Old powerline

Just added the submodule https//github.com/lokaltog/vim-powerline.  No need
to do anything else than make sure the =laststatus= is set to 2 (always).

Edit: I removed it but I am leaving this section here.  The new powerline made
my vim not start until I replaced it with macvim installed from homebrew.

The lokaltog one however doesn't need anything like that.

As far as I know, the problem only happens on mac and on the various linux
computers I have tried, the new powerline has not been an issue.

** Keys
#+begin_src vimrc
inoremap jk <ESC>
#+end_src

*** Scrolling

Up down move the cursor in one direction and scrolls the view in the other.
This has the effect that the cursor stays in the same place on the screen
which is a good behavior for scrolling.
#+begin_src vimrc
nnoremap <Up> <C-y>k
nnoremap <Down> <C-e>j
#+end_src

*** Make arrows print quotes from The Shadow (1982) with Alec Baldwin
#+begin_src vimrc
nnoremap <Left> <ESC>:echoerr "Your mind is weak."<CR>
nnoremap <Right> <ESC>:echoerr "Your mind is weak."<CR>

inoremap <Up> <ESC>:echoerr "Join me or die"<CR>
inoremap <Down> <ESC>:echoerr "The clouded mind sees nothing"<CR>
inoremap <Left> <ESC>:echoerr "Your mind is weak."<CR>
inoremap <Right> <ESC>:echoerr "The clouded mind sees nothing"<CR>
#+end_src

** Use system clipboard

Tested on MacOS with Vim 8+

Reference : =:help clipboard=
#+begin_src vimrc
if $SSH_CLIENT == ""
    set clipboard=unnamed
endif
#+end_src
